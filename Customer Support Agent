#Install Dependencies

pip install crewai==0.28.8 crewai_tools==0.1.6 langchain_community==0.0.29

# Warning control
import warnings
warnings.filterwarnings('ignore')

import os
from crewai import Agent, Task, Crew

os.environ["OPENAI_API_KEY"] = "YOUR API KEY" (You can set api key in .env file to make it more safe)
os.environ["OPENAI_MODEL_NAME"] = 'MODEL OF YOUR CHOICE"

#Create a support agent

support_agent = Agent(
    role = "Senior Support Representative",
    goal = "Be the most friendly and helpful support representative in your team",
    backstory =( """You work at Polling (https://polling.com/) and are now working on providing support to {customer},a supper important customer for your company.
          You need to make sure that you provide the best support. Make sure to provide full, complete answeres and make no assumptions"""
    ),
    allow_deligation = False,
    verbose=True
)

#QA Agent 
support_quality_assurance_agent = Agent(
    role = "Support Quality Assurance Speciallist",
    goal = "Get recognition for providing the best support quality assurance in your team.",
    backstory = (
        """You work at Polling (https://polling.com/) and are now working with your team on a request from 
        {customer} ensuring that the support representative is providing the best support possible. You need to
        make sure that the support representative is full complete asnwers and make no assumptions"""
    ),
    allow_deligation = True,   (deligation = True will allow the agent to collaborate with other agent if he wants)
    verbose=True
)

#importing tool
from crewai_tools import SerperDevTool, ScrapeWebsiteTool, WebsiteSearchTool 

scrape_website = ScrapeWebsiteTool(
    website_url = "(https://polling.com/)"
)

#Create inquiry taskinquiry_resolution = Task(
    description = (
        """{customer} just reached out with super important ask.
        {inquiry}
        {person} from {customer} is the one that reached out.Make sure to use everything you know to provide the best support possible.
        You must strive to provide a complete and accurate response to the customer's inquiry."""
    ),
    expected_output = (
        """A detailed informative response to the customer's inquiry that addresses all aspects of their questions. The response should include refrences
        to everything you used to find the answere including external data or solutions. Ensure the answere is complete, leaving no questions unanswered and 
        maintain a helpful and friendly tone througout.""" 
    ),
    tools = scrape_website,
    agent = support_agent
)

#QA Review
qa_review = Task(
    description = (
        """Review the response drafted by the Senior Support Representative for the {customer}.Ensure that the answere is comprehensive,accurate and adheres
        to the high quality standards expected from customer support. Verify that all parts of customer's inquiry has been addressed thoroughly with helpful
        and friendly tone. Check for refrences and sources used to find the information ensuirng the response is well-supported and leaves no question
        unanswered.""" 
    ),
    expected_output = (
        """A final, detailed and informative response ready to be sent to the customer. This response should fully address the customer's inquiry,
        incorporating all the relevent feedback and improvements. Do not be too formal, we are a chill and cool company but maintain professional 
        and friendly tone throughout."""
    ),
    agent= support_quality_assurance_agent
)

#Creating the Crew
crew = Crew(
    agents = [support_agent, support_quality_assurance_agent],
    tasks = [inquiry_resolution, qa_review],
    verbose = True,
    memory = True
)

#Running the crew
inputs = input('Enter your query')
# Provide values for the placeholders in the task descriptions
results = crew.kickoff(inputs={'inquiry': inputs, 'customer': 'Gemini', 'person': 'John Doe'})

#DON'T FORGET TO ADD YOUR API KEY 
